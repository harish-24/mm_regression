#!1 BACKEND: anonymous thp

. $TRDIR/lib/setup_page_migration.sh

NUMA_NODE=2
MIGRATE_SRC=auto_numa

BACKEND=__STR_BACKEND

AUTO_NUMA=true

if [ "$BACKEND" == thp ] ; then
	THP=madvise
	#BACKEND="hugetlb_anon"
	#HUGETLB=200
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_MIGRATED THP_NOT_SPLIT EXIT"
elif [ "$BACKEND" == anonymous ] ; then
	EXPECTED_RETURN_CODE="START MIGRATION_PASSED HUGEPAGE_NOT_EXIST EXIT"
fi

# in auto_numa testing, initial cpu affinity is important so set it with
# preferred_cpu_node=0 parameter. And during waiting the memeat thread must keep
# accessing the target region to drive NUMA hinting fault (done by :busyloop.)
TEST_PROGRAM="lib/test_alloc_generic -B $BACKEND -N 20 -L 'start:wait_after mmap_numa:preferred_cpu_node=0:preferred_mem_node=0 access:wait_after $MIGRATE_SRC:busyloop munmap:wait_before exit:wait_before'"

_control() {
    local pid="$1"
    local line="$2"

	echo_log "$line"
	case "$line" in
		"after_start")
			get_mm_stats 0 $pid
			kill -SIGUSR1 $pid
			;;
		"after_access")
			get_mm_stats 1 $pid
			kill -SIGUSR1 $pid
			;;
		"before_munmap")
			get_mm_stats 2 $pid

			if [ "$MIGRATE_SRC" ] ; then
				check_migration_done $TMPD/pagetypes.1 $TMPD/pagetypes.2
			fi

			if [ "$THP" ] ; then
				check_thp_split
				ret=$?
				if [ "$ret" == 0 ] ; then
					set_return_code THP_SPLIT
				elif [ "$ret" == 1 ] ; then
					set_return_code PMD_SPLIT
				elif [ "$ret" == 2 ] ; then
					set_return_code THP_NOT_SPLIT
				fi
			fi

			kill -SIGUSR1 $pid
			;;
		"before_exit")
			kill -SIGUSR1 $pid
			set_return_code EXIT
			return 0
			;;
		"waiting for auto_numa")
			# Current CPU/Memory should be NUMA non-optimal to kick
			# auto NUMA.
			echo "current CPU: $(ps -o psr= $pid)"
			taskset -p $pid
			# get_numa_maps $pid | tee $TMPD/numa_maps.1 | grep ^70000
			# get_numa_maps ${pid}
			# $PAGETYPES -p $pid -Nl -a 0x700000000+$[NR_THPS * 512]
			# grep numa_hint_faults /proc/vmstat
			# expecting numa balancing migration
			sleep 3
			echo "current CPU: $(ps -o psr= $pid)"
			taskset -p $pid

			get_numa_maps $pid | tee $TMPD/numa_maps.2 | grep ^70000
			$PAGETYPES -p $pid -Nl -a 0x700000000+$[NR_THPS * 512]
			grep numa_hint_faults /proc/vmstat
			kill -SIGUSR1 $pid
			;;
		"entering busy loop")
			# sysctl -a | grep huge

			if [ "$MIGRATE_SRC" = auto_numa ] ; then
				# Current CPU/Memory should be NUMA non-optimal to kick
				# auto NUMA.
				echo "current CPU: $(ps -o psr= $pid)"
				taskset -p $pid
				get_numa_maps $pid | tee $TMPD/numa_maps.1 | grep ^70000
				# get_numa_maps ${pid}
				$PAGETYPES -p $pid -Nl -a 0x700000000+$[NR_THPS * 512]
				grep numa_hint_faults /proc/vmstat
				# expecting numa balancing migration
				sleep 3
				echo "current CPU: $(ps -o psr= $pid)"
				taskset -p $pid
				get_numa_maps $pid | tee $TMPD/numa_maps.2 | grep ^70000
				$PAGETYPES -p $pid -Nl -a 0x700000000+$[NR_THPS * 512]
				grep numa_hint_faults /proc/vmstat
			fi

			$PAGETYPES -p $pid -a 0x700000000+0x10000000 -NrL | grep -v offset | cut -f1,2 > $TMPD/.mig2
			# count diff stats
			diff -u0 $TMPD/.mig1 $TMPD/.mig2 > $TMPD/.mig3
			diffsize=$(grep -c -e ^+ -e ^- $TMPD/.mig3)
			if [ "$diffsize" -eq 0 ] ; then
				set_return_code MIGRATION_FAILED
				echo "page migration failed."
			else
				echo "pfn/vaddr shows $diffsize diff lines"
				set_return_code MIGRATION_PASSED
			fi

			kill -SIGUSR1 $pid
			;;
		*)
			;;
	esac
	return 1
}

_prepare() {
	prepare_mm_generic || return 1
}

_cleanup() {
	cleanup_mm_generic
}
